package otr3

import (
	"bufio"
	"bytes"
	"testing"
)

var (
	serializedPublicKey = []byte{
		// key type for DSA
		0x00, 0x00,

		// len of p MPI
		0x00, 0x00, 0x00, 0x80,
		// p MPI
		0xF2, 0x48, 0x43, 0xF9, 0x44, 0x7B, 0x62, 0x13, 0x8A, 0xE4, 0x9B, 0xF8, 0x31, 0x88, 0xD1, 0x35, 0x3A, 0xDA, 0x5C, 0xAC, 0x11, 0x88, 0x90, 0xCF, 0xDE, 0xC0, 0x1B, 0xF3, 0x49, 0xD7, 0x5E, 0x88, 0x7B, 0x19, 0xC2, 0x21, 0x66, 0x5C, 0x78, 0x57, 0xCA, 0xD5, 0x83, 0xAF, 0x65, 0x6C, 0x67, 0xFB, 0x04, 0xA9, 0x9F, 0xD8, 0xF8, 0xD6, 0x9D, 0x09, 0xC9, 0x52, 0x9C, 0x6C, 0x14, 0xD4, 0x26, 0xF1, 0xE3, 0x92, 0x4D, 0xC9, 0x24, 0x3A, 0xF2, 0x97, 0x0E, 0x3E, 0x4B, 0x04, 0xA2, 0x34, 0x89, 0xA0, 0x9E, 0x8A, 0x90, 0xE7, 0xE8, 0x1E, 0xBA, 0x76, 0x3A, 0xD4, 0xF0, 0x63, 0x6B, 0x8A, 0x43, 0x41, 0x5B, 0x6F, 0xC1, 0x6A, 0x02, 0xC3, 0x62, 0x4C, 0xE7, 0x62, 0x72, 0xFA, 0x00, 0x78, 0x3C, 0x8D, 0xB8, 0x50, 0xD3, 0xA9, 0x96, 0xB5, 0x81, 0x36, 0xF7, 0xA0, 0xEB, 0x80, 0xAE, 0x0B, 0xC6, 0x13,

		// len of q MPI
		0x00, 0x00, 0x00, 0x14,
		// q MPI
		0xD1, 0x6B, 0x26, 0x07, 0xFC, 0xBC, 0x0E, 0xDC, 0x63, 0x9F, 0x76, 0x3A, 0x54, 0xF3, 0x44, 0x75, 0xB1, 0xCC, 0x84, 0x73,

		// len of g MPI
		0x00, 0x00, 0x00, 0x80,
		// g MPI
		0xB1, 0x5A, 0xFE, 0xF5, 0xF9, 0x6E, 0xFE, 0xE4, 0x10, 0x06, 0xF1, 0x36, 0xC2, 0x3A, 0x18, 0x84, 0x9D, 0xA8, 0x13, 0x30, 0x69, 0xA8, 0x79, 0xD0, 0x83, 0xF7, 0xC7, 0xAA, 0x36, 0x2E, 0x18, 0x7D, 0xAE, 0x3E, 0xD0, 0xC4, 0xF3, 0x72, 0xD0, 0xD4, 0xE3, 0xAA, 0xE5, 0x67, 0x00, 0x8A, 0x18, 0x72, 0xA6, 0xE8, 0x5D, 0x8F, 0x84, 0xE5, 0x3A, 0x3F, 0xE1, 0xB3, 0x52, 0xAF, 0x0B, 0x4E, 0x2F, 0x0C, 0xB0, 0x33, 0xA6, 0xD3, 0x42, 0x85, 0xEC, 0xD3, 0xE4, 0xA9, 0x36, 0x53, 0xBD, 0xE9, 0x9C, 0x3A, 0x8D, 0x84, 0x0D, 0x9D, 0x35, 0xF8, 0x2A, 0xC2, 0xFA, 0x85, 0x39, 0xDB, 0x6C, 0x7F, 0x7A, 0x1D, 0xAD, 0x77, 0xFE, 0xEC, 0xD6, 0x28, 0x03, 0x75, 0x7F, 0xF1, 0xE2, 0xDE, 0x4C, 0xEC, 0x4A, 0x5A, 0x2A, 0xD6, 0x43, 0x27, 0x15, 0x14, 0xDD, 0xEE, 0xEF, 0x3D, 0x00, 0x8F, 0x66, 0xFB, 0xF9, 0xDB,

		// len of y MPI
		0x00, 0x00, 0x00, 0x80,
		// y MPI
		0x01, 0xF9, 0xBE, 0x7D, 0xA0, 0xE4, 0xE8, 0x47, 0x74, 0x04, 0x80, 0x58, 0xB5, 0x32, 0x02, 0xB2, 0x70, 0x4B, 0xF6, 0x88, 0xA3, 0x06, 0x09, 0x2E, 0xD5, 0x33, 0xA5, 0x5E, 0x68, 0xEA, 0xBA, 0x81, 0x4C, 0x8D, 0x62, 0xF4, 0x5A, 0xAD, 0x8F, 0xF3, 0x0C, 0x30, 0x55, 0xDC, 0xA4, 0x61, 0xB7, 0xDB, 0xA6, 0xB7, 0x89, 0x38, 0xFC, 0x4D, 0x69, 0x78, 0x0A, 0x83, 0x0C, 0x64, 0x57, 0xCC, 0x10, 0x7F, 0x3D, 0x27, 0x5C, 0x21, 0xD0, 0x0E, 0x53, 0x14, 0x7C, 0x14, 0x16, 0x21, 0x76, 0xC7, 0x71, 0x69, 0xD3, 0xBC, 0xA5, 0x86, 0xDC, 0x30, 0xF1, 0x5F, 0x4B, 0x48, 0x21, 0x60, 0xE2, 0x76, 0x86, 0x9A, 0xA3, 0x36, 0xF3, 0x8A, 0xF7, 0xFC, 0x36, 0x86, 0xA7, 0x64, 0xAB, 0x5A, 0x02, 0xC7, 0x51, 0xD9, 0x21, 0xA4, 0x2B, 0x8B, 0x9A, 0xE8, 0xE0, 0x69, 0x18, 0x05, 0x9C, 0xD7, 0x3C, 0x42, 0x41, 0x54,
	}
	serializedPrivateKey = []byte{
		// key type for DSA
		0x00, 0x00,

		// len of p MPI
		0x00, 0x00, 0x00, 0x80,
		// p MPI
		0xF2, 0x48, 0x43, 0xF9, 0x44, 0x7B, 0x62, 0x13, 0x8A, 0xE4, 0x9B, 0xF8, 0x31, 0x88, 0xD1, 0x35, 0x3A, 0xDA, 0x5C, 0xAC, 0x11, 0x88, 0x90, 0xCF, 0xDE, 0xC0, 0x1B, 0xF3, 0x49, 0xD7, 0x5E, 0x88, 0x7B, 0x19, 0xC2, 0x21, 0x66, 0x5C, 0x78, 0x57, 0xCA, 0xD5, 0x83, 0xAF, 0x65, 0x6C, 0x67, 0xFB, 0x04, 0xA9, 0x9F, 0xD8, 0xF8, 0xD6, 0x9D, 0x09, 0xC9, 0x52, 0x9C, 0x6C, 0x14, 0xD4, 0x26, 0xF1, 0xE3, 0x92, 0x4D, 0xC9, 0x24, 0x3A, 0xF2, 0x97, 0x0E, 0x3E, 0x4B, 0x04, 0xA2, 0x34, 0x89, 0xA0, 0x9E, 0x8A, 0x90, 0xE7, 0xE8, 0x1E, 0xBA, 0x76, 0x3A, 0xD4, 0xF0, 0x63, 0x6B, 0x8A, 0x43, 0x41, 0x5B, 0x6F, 0xC1, 0x6A, 0x02, 0xC3, 0x62, 0x4C, 0xE7, 0x62, 0x72, 0xFA, 0x00, 0x78, 0x3C, 0x8D, 0xB8, 0x50, 0xD3, 0xA9, 0x96, 0xB5, 0x81, 0x36, 0xF7, 0xA0, 0xEB, 0x80, 0xAE, 0x0B, 0xC6, 0x13,

		// len of q MPI
		0x00, 0x00, 0x00, 0x14,
		// q MPI
		0xD1, 0x6B, 0x26, 0x07, 0xFC, 0xBC, 0x0E, 0xDC, 0x63, 0x9F, 0x76, 0x3A, 0x54, 0xF3, 0x44, 0x75, 0xB1, 0xCC, 0x84, 0x73,

		// len of g MPI
		0x00, 0x00, 0x00, 0x80,
		// g MPI
		0xB1, 0x5A, 0xFE, 0xF5, 0xF9, 0x6E, 0xFE, 0xE4, 0x10, 0x06, 0xF1, 0x36, 0xC2, 0x3A, 0x18, 0x84, 0x9D, 0xA8, 0x13, 0x30, 0x69, 0xA8, 0x79, 0xD0, 0x83, 0xF7, 0xC7, 0xAA, 0x36, 0x2E, 0x18, 0x7D, 0xAE, 0x3E, 0xD0, 0xC4, 0xF3, 0x72, 0xD0, 0xD4, 0xE3, 0xAA, 0xE5, 0x67, 0x00, 0x8A, 0x18, 0x72, 0xA6, 0xE8, 0x5D, 0x8F, 0x84, 0xE5, 0x3A, 0x3F, 0xE1, 0xB3, 0x52, 0xAF, 0x0B, 0x4E, 0x2F, 0x0C, 0xB0, 0x33, 0xA6, 0xD3, 0x42, 0x85, 0xEC, 0xD3, 0xE4, 0xA9, 0x36, 0x53, 0xBD, 0xE9, 0x9C, 0x3A, 0x8D, 0x84, 0x0D, 0x9D, 0x35, 0xF8, 0x2A, 0xC2, 0xFA, 0x85, 0x39, 0xDB, 0x6C, 0x7F, 0x7A, 0x1D, 0xAD, 0x77, 0xFE, 0xEC, 0xD6, 0x28, 0x03, 0x75, 0x7F, 0xF1, 0xE2, 0xDE, 0x4C, 0xEC, 0x4A, 0x5A, 0x2A, 0xD6, 0x43, 0x27, 0x15, 0x14, 0xDD, 0xEE, 0xEF, 0x3D, 0x00, 0x8F, 0x66, 0xFB, 0xF9, 0xDB,

		// len of y MPI
		0x00, 0x00, 0x00, 0x80,
		// y MPI
		0x01, 0xF9, 0xBE, 0x7D, 0xA0, 0xE4, 0xE8, 0x47, 0x74, 0x04, 0x80, 0x58, 0xB5, 0x32, 0x02, 0xB2, 0x70, 0x4B, 0xF6, 0x88, 0xA3, 0x06, 0x09, 0x2E, 0xD5, 0x33, 0xA5, 0x5E, 0x68, 0xEA, 0xBA, 0x81, 0x4C, 0x8D, 0x62, 0xF4, 0x5A, 0xAD, 0x8F, 0xF3, 0x0C, 0x30, 0x55, 0xDC, 0xA4, 0x61, 0xB7, 0xDB, 0xA6, 0xB7, 0x89, 0x38, 0xFC, 0x4D, 0x69, 0x78, 0x0A, 0x83, 0x0C, 0x64, 0x57, 0xCC, 0x10, 0x7F, 0x3D, 0x27, 0x5C, 0x21, 0xD0, 0x0E, 0x53, 0x14, 0x7C, 0x14, 0x16, 0x21, 0x76, 0xC7, 0x71, 0x69, 0xD3, 0xBC, 0xA5, 0x86, 0xDC, 0x30, 0xF1, 0x5F, 0x4B, 0x48, 0x21, 0x60, 0xE2, 0x76, 0x86, 0x9A, 0xA3, 0x36, 0xF3, 0x8A, 0xF7, 0xFC, 0x36, 0x86, 0xA7, 0x64, 0xAB, 0x5A, 0x02, 0xC7, 0x51, 0xD9, 0x21, 0xA4, 0x2B, 0x8B, 0x9A, 0xE8, 0xE0, 0x69, 0x18, 0x05, 0x9C, 0xD7, 0x3C, 0x42, 0x41, 0x54,

		// len of x MPI
		0x00, 0x00, 0x00, 0x14,
		// y MPI
		0x14, 0xD0, 0x34, 0x5A, 0x35, 0x62, 0xC4, 0x80, 0xA0, 0x39, 0xE3, 0xC7, 0x27, 0x64, 0xF7, 0x2D, 0x79, 0x04, 0x32, 0x16,
	}
)

func inp(s string) *bufio.Reader {
	return bufio.NewReader(bytes.NewBuffer([]byte(s)))
}

func Test_readParameter_willReturnTheParameterRead(t *testing.T) {
	tag, value, _ := readParameter(inp(`(p #00FC07ABCF0DC916AFF6E9A0D450A9B7A857#)`))
	assertDeepEquals(t, tag, "p")
	assertDeepEquals(t, value, bnFromHex("00FC07ABCF0DC916AFF6E9A0D450A9B7A857"))
}

func Test_readParameter_willReturnAnotherParameterRead(t *testing.T) {
	tag, value, _ := readParameter(inp(`(quux #00FC07ABCF0DC916AFF6E9A0D450A9B7A858#)`))
	assertDeepEquals(t, tag, "quux")
	assertDeepEquals(t, value, bnFromHex("00FC07ABCF0DC916AFF6E9A0D450A9B7A858"))
}

func Test_readDSAPrivateKey_willReturnADSAPrivateKey(t *testing.T) {
	from := inp(`(dsa
  (p #00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857#)
  (q #00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081#)
  (g #535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26#)
  (y #0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF#)
  (x #14D0345A3562C480A039E3C72764F72D79043216#)
  )`)
	k := readDSAPrivateKey(from)
	assertDeepEquals(t, k.P, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857"))
	assertDeepEquals(t, k.Q, bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081"))
	assertDeepEquals(t, k.G, bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26"))
	assertDeepEquals(t, k.X, bnFromHex("14D0345A3562C480A039E3C72764F72D79043216"))
	assertDeepEquals(t, k.Y, bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF"))
}

func Test_readPrivateKey_willReturnAPrivateKey(t *testing.T) {
	from := inp(`(private-key (dsa
  (p #00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857#)
  (q #00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081#)
  (g #535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26#)
  (y #0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF#)
  (x #14D0345A3562C480A039E3C72764F72D79043217#)
  ))`)
	k := readPrivateKey(from)
	assertDeepEquals(t, k.PrivateKey.P, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857"))
	assertDeepEquals(t, k.PrivateKey.Q, bnFromHex("00997BD266EF7B1F60A5C23F3A741F2AEFD07A2081"))
	assertDeepEquals(t, k.PrivateKey.G, bnFromHex("535E360E8A95EBA46A4F7DE50AD6E9B2A6DB785A66B64EB9F20338D2A3E8FB0E94725848F1AA6CC567CB83A1CC517EC806F2E92EAE71457E80B2210A189B91250779434B41FC8A8873F6DB94BEA7D177F5D59E7E114EE10A49CFD9CEF88AE43387023B672927BA74B04EB6BBB5E57597766A2F9CE3857D7ACE3E1E3BC1FC6F26"))
	assertDeepEquals(t, k.PrivateKey.X, bnFromHex("14D0345A3562C480A039E3C72764F72D79043217"))
	assertDeepEquals(t, k.PrivateKey.Y, bnFromHex("0AC8670AD767D7A8D9D14CC1AC6744CD7D76F993B77FFD9E39DF01E5A6536EF65E775FCEF2A983E2A19BD6415500F6979715D9FD1257E1FE2B6F5E1E74B333079E7C880D39868462A93454B41877BE62E5EF0A041C2EE9C9E76BD1E12AE25D9628DECB097025DD625EF49C3258A1A3C0FF501E3DC673B76D7BABF349009B6ECF"))
}

func Test_readAccount_willReturnAnAccount(t *testing.T) {
	from := inp(`(account
(name "foo")
(protocol libpurple-Jabber)
(private-key (dsa
  (p #00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857#)
  )))`)
	k := readAccount(from)
	assertDeepEquals(t, k.name, "foo")
	assertDeepEquals(t, k.protocol, "libpurple-Jabber")
	assertDeepEquals(t, k.key.PrivateKey.P, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A857"))
}

func Test_readAccounts_willReturnTheAccountRead(t *testing.T) {
	from := inp(`(privkeys (account
(name "foo2")
(protocol libpurple-Jabberx)
(private-key (dsa
  (p #00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A858#)
  ))))`)
	k := readAccounts(from)
	assertDeepEquals(t, k[0].name, "foo2")
	assertDeepEquals(t, k[0].protocol, "libpurple-Jabberx")
	assertDeepEquals(t, k[0].key.PrivateKey.P, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A858"))
}

func Test_readAccounts_willReturnMoreThanOneAccount(t *testing.T) {
	from := inp(`(privkeys (account
(name "foo2")
(protocol libpurple-Jabberx)
(private-key (dsa
  (p #00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A858#)
  )))
	(account
	(name "2")
	(protocol libpurple-jabber-gtalk)
	(private-key
	 (dsa
	  (p #00F24843F9447B62138AE49BF83188D1353ADA5CAC118890CFDEC01BF349D75E887B19C221665C7857CAD583AF656C67FB04A99FD8F8D69D09C9529C6C14D426F1E3924DC9243AF2970E3E4B04A23489A09E8A90E7E81EBA763AD4F0636B8A43415B6FC16A02C3624CE76272FA00783C8DB850D3A996B58136F7A0EB80AE0BC613#)
	  (q #00D16B2607FCBC0EDC639F763A54F34475B1CC8473#)
	  (g #00B15AFEF5F96EFEE41006F136C23A18849DA8133069A879D083F7C7AA362E187DAE3ED0C4F372D0D4E3AAE567008A1872A6E85D8F84E53A3FE1B352AF0B4E2F0CB033A6D34285ECD3E4A93653BDE99C3A8D840D9D35F82AC2FA8539DB6C7F7A1DAD77FEECD62803757FF1E2DE4CEC4A5A2AD643271514DDEEEF3D008F66FBF9DB#)
	  (y #01F9BE7DA0E4E84774048058B53202B2704BF688A306092ED533A55E68EABA814C8D62F45AAD8FF30C3055DCA461B7DBA6B78938FC4D69780A830C6457CC107F3D275C21D00E53147C14162176C77169D3BCA586DC30F15F4B482160E276869AA336F38AF7FC3686A764AB5A02C751D921A42B8B9AE8E06918059CD73C424154#)
	  (x #00943480B228FC0D3D7ADFC91F680FC415E1306333#)
	  )
	 )
	 )
	)`)
	k := readAccounts(from)
	assertDeepEquals(t, k[0].name, "foo2")
	assertDeepEquals(t, k[0].protocol, "libpurple-Jabberx")
	assertDeepEquals(t, k[0].key.PrivateKey.P, bnFromHex("00FC07ABCF0DC916AFF6E9AE47BEF60C7AB9B4D6B2469E436630E36F8A489BE812486A09F30B71224508654940A835301ACC525A4FF133FC152CC53DCC59D65C30A54F1993FE13FE63E5823D4C746DB21B90F9B9C00B49EC7404AB1D929BA7FBA12F2E45C6E0A651689750E8528AB8C031D3561FECEE72EBB4A090D450A9B7A858"))
	assertDeepEquals(t, k[1].name, "2")
	assertDeepEquals(t, k[1].protocol, "libpurple-jabber-gtalk")
	assertDeepEquals(t, k[1].key.PrivateKey.Q, bnFromHex("00D16B2607FCBC0EDC639F763A54F34475B1CC8473"))
}

func Test_PublicKey_parse_ParsePofAPublicKeyCorrectly(t *testing.T) {
	var pk PublicKey
	pk.parse(serializedPublicKey)

	assertDeepEquals(t, pk.P, bnFromHex("00F24843F9447B62138AE49BF83188D1353ADA5CAC118890CFDEC01BF349D75E887B19C221665C7857CAD583AF656C67FB04A99FD8F8D69D09C9529C6C14D426F1E3924DC9243AF2970E3E4B04A23489A09E8A90E7E81EBA763AD4F0636B8A43415B6FC16A02C3624CE76272FA00783C8DB850D3A996B58136F7A0EB80AE0BC613"))
}

func Test_PublicKey_parse_ParseQofAPublicKeyCorrectly(t *testing.T) {
	var pk PublicKey
	pk.parse(serializedPublicKey)

	assertDeepEquals(t, pk.Q, bnFromHex("00D16B2607FCBC0EDC639F763A54F34475B1CC8473"))
}

func Test_PublicKey_parse_ParseGofAPublicKeyCorrectly(t *testing.T) {
	var pk PublicKey
	pk.parse(serializedPublicKey)

	assertDeepEquals(t, pk.G, bnFromHex("00B15AFEF5F96EFEE41006F136C23A18849DA8133069A879D083F7C7AA362E187DAE3ED0C4F372D0D4E3AAE567008A1872A6E85D8F84E53A3FE1B352AF0B4E2F0CB033A6D34285ECD3E4A93653BDE99C3A8D840D9D35F82AC2FA8539DB6C7F7A1DAD77FEECD62803757FF1E2DE4CEC4A5A2AD643271514DDEEEF3D008F66FBF9DB"))
}

func Test_PublicKey_parse_ParseYofAPublicKeyCorrectly(t *testing.T) {
	var pk PublicKey
	pk.parse(serializedPublicKey)

	assertDeepEquals(t, pk.Y, bnFromHex("01F9BE7DA0E4E84774048058B53202B2704BF688A306092ED533A55E68EABA814C8D62F45AAD8FF30C3055DCA461B7DBA6B78938FC4D69780A830C6457CC107F3D275C21D00E53147C14162176C77169D3BCA586DC30F15F4B482160E276869AA336F38AF7FC3686A764AB5A02C751D921A42B8B9AE8E06918059CD73C424154"))
}

func Test_PrivateKey_parse_ParsePublicKeyofAPrivateKeyCorrectly(t *testing.T) {
	var priv PrivateKey
	var pk PublicKey
	priv.parse(serializedPrivateKey)
	pk.parse(serializedPublicKey)

	assertDeepEquals(t, priv.PublicKey, pk)
}

func Test_PrivateKey_parse_ParseXofAPrivateKeyCorrectly(t *testing.T) {
	var priv PrivateKey
	priv.parse(serializedPrivateKey)
	assertDeepEquals(t, priv.X, bnFromHex("14D0345A3562C480A039E3C72764F72D79043216"))
}

func Test_PublicKey_serialize_willSerializeAPublicKeyCorrectly(t *testing.T) {
	var pk PublicKey
	pk.parse(serializedPublicKey)
	result := pk.serialize()
	assertDeepEquals(t, result, serializedPublicKey)
}

func Test_PrivateKey_roundTripGeneratesCorrectValue(t *testing.T) {
	var pk PrivateKey
	pk.parse(serializedPrivateKey)
	result := pk.serialize()
	assertDeepEquals(t, result, serializedPrivateKey)
}

func Test_PublicKey_fingerprint_willGenerateACorrectFingerprint(t *testing.T) {
	priv := parseIntoPrivateKey("000000000080c81c2cb2eb729b7e6fd48e975a932c638b3a9055478583afa46755683e30102447f6da2d8bec9f386bbb5da6403b0040fee8650b6ab2d7f32c55ab017ae9b6aec8c324ab5844784e9a80e194830d548fb7f09a0410df2c4d5c8bc2b3e9ad484e65412be689cf0834694e0839fb2954021521ffdffb8f5c32c14dbf2020b3ce7500000014da4591d58def96de61aea7b04a8405fe1609308d000000808ddd5cb0b9d66956e3dea5a915d9aba9d8a6e7053b74dadb2fc52f9fe4e5bcc487d2305485ed95fed026ad93f06ebb8c9e8baf693b7887132c7ffdd3b0f72f4002ff4ed56583ca7c54458f8c068ca3e8a4dfa309d1dd5d34e2a4b68e6f4338835e5e0fb4317c9e4c7e4806dafda3ef459cd563775a586dd91b1319f72621bf3f00000080b8147e74d8c45e6318c37731b8b33b984a795b3653c2cd1d65cc99efe097cb7eb2fa49569bab5aab6e8a1c261a27d0f7840a5e80b317e6683042b59b6dceca2879c6ffc877a465be690c15e4a42f9a7588e79b10faac11b1ce3741fcef7aba8ce05327a2c16d279ee1b3d77eb783fb10e3356caa25635331e26dd42b8396c4d00000001420bec691fea37ecea58a5c717142f0b804452f57")
	expectedFingerprint := bytesFromHex("0bb01c360424522e94ee9c346ce877a1a4288b2f")
	assertDeepEquals(t, priv.PublicKey.fingerprint(), expectedFingerprint)
}
