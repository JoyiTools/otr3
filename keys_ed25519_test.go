package otr3

import (
	"crypto/rand"
	"testing"

	"github.com/agl/ed25519"
)

var (
	publicKeyEd25519Value = [ed25519.PublicKeySize]byte{
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,
	}
	privateKeyEd25519Value = [ed25519.PrivateKeySize]byte{
		0xbb, 0x1b, 0x69, 0x6a, 0xfa, 0x02, 0x58, 0x51,
		0x4f, 0x9d, 0x35, 0x2b, 0x87, 0x41, 0x97, 0x83,
		0x24, 0xff, 0x6e, 0x4e, 0x29, 0xf2, 0x9e, 0x2e,
		0xf4, 0x37, 0x7d, 0x1c, 0xbb, 0x20, 0xa8, 0x82,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,
	}
)

func Test_ed25519_generate_generatesAKeyThatIsNotJustZeroes(t *testing.T) {
	var priv Ed25519PrivateKey
	err := priv.Generate(rand.Reader)
	assertNil(t, err)
	assertNotEquals(t, priv.pub, [ed25519.PublicKeySize]byte{})
	assertNotEquals(t, priv.priv, [ed25519.PrivateKeySize]byte{})
}

func Test_ed25519_serializeWillSerializeTheKey(t *testing.T) {
	var priv Ed25519PrivateKey
	copy(priv.pub[:], publicKeyEd25519Value[:])
	copy(priv.priv[:], privateKeyEd25519Value[:])
	assertDeepEquals(t, priv.Serialize(), []byte{
		0x0, 0x3,

		0x0, 0x0, 0x0, 0x20,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,

		0x0, 0x0, 0x0, 0x40,
		0xbb, 0x1b, 0x69, 0x6a, 0xfa, 0x02, 0x58, 0x51,
		0x4f, 0x9d, 0x35, 0x2b, 0x87, 0x41, 0x97, 0x83,
		0x24, 0xff, 0x6e, 0x4e, 0x29, 0xf2, 0x9e, 0x2e,
		0xf4, 0x37, 0x7d, 0x1c, 0xbb, 0x20, 0xa8, 0x82,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,
	})

	assertDeepEquals(t, priv.Ed25519PublicKey.serialize(), []byte{
		0x0, 0x3,

		0x0, 0x0, 0x0, 0x20,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,
	})
}

func Test_ed25519_parseWillParseAPrivateKey(t *testing.T) {
	_, ok, _ := ParsePrivateKey([]byte{
		0x0, 0x3,

		0x0, 0x0, 0x0, 0x20,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,

		0x0, 0x0, 0x0, 0x40,
		0xbb, 0x1b, 0x69, 0x6a, 0xfa, 0x02, 0x58, 0x51,
		0x4f, 0x9d, 0x35, 0x2b, 0x87, 0x41, 0x97, 0x83,
		0x24, 0xff, 0x6e, 0x4e, 0x29, 0xf2, 0x9e, 0x2e,
		0xf4, 0x37, 0x7d, 0x1c, 0xbb, 0x20, 0xa8, 0x82,
		0x67, 0xee, 0xb9, 0xb5, 0xdb, 0x53, 0xcb, 0x59,
		0xc4, 0xb7, 0x51, 0xc5, 0xdb, 0xd2, 0x6f, 0xc3,
		0xbe, 0xf1, 0xc0, 0x2d, 0x7f, 0x57, 0x42, 0xd8,
		0x77, 0x7b, 0x71, 0xe4, 0xb0, 0x6c, 0x0b, 0x04,
	})

	assertTrue(t, ok)
}
